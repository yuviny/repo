// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchProperties.vsl in andromda-spring-cartridge.
//
package finf.ucf.cu;

/**
 * Stores the embedded values and asssociations of all entities in the system by type.  
 * Is used to determine the appropriate parameter name when an embedded value's property 
 * is referenced as the attribute to search by (as opposed to an association).
 * 
 * @author Chad Brandon
 */
 public class CriteriaSearchProperties
{
    private static final java.util.Map embeddedValuesByType = new java.util.HashMap();
    private static final java.util.Map embeddedValueNamesByType = new java.util.HashMap();
    private static final java.util.Map navigableAssociationEndsByType = new java.util.HashMap();
    
    static
    {
        initialize1();
        initialize2();
        initialize3();
        initialize4();
        initialize5();
        initialize6();
        initialize7();
        initialize8();
        initialize9();
        initialize10();
        initialize11();
        initialize12();
        initialize13();
        initialize14();
        initialize15();
        initialize16();
        initialize17();
    }
    
    private static final void initialize1()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.TeacherImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.TeacherImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.TeacherImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("departmentId", finf.ucf.cu.domain.DepartmentImpl.class)
                }
            )
        );
    }
    
    private static final void initialize2()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.GroupImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.GroupImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.GroupImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("subGroupId", finf.ucf.cu.domain.GroupImpl.class)
                }
            )
        );
    }
    
    private static final void initialize3()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.SubjectImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.SubjectImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.SubjectImpl.class,
            null);
    }
    
    private static final void initialize4()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ClassTimeImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ClassTimeImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ClassTimeImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("groupId", finf.ucf.cu.domain.GroupImpl.class), 
                    new PropertyType("teacherId", finf.ucf.cu.domain.TeacherImpl.class), 
                    new PropertyType("subjectId", finf.ucf.cu.domain.SubjectImpl.class), 
                    new PropertyType("roomId", finf.ucf.cu.domain.RoomImpl.class), 
                    new PropertyType("solution", finf.ucf.cu.domain.SemesterImpl.class), 
                    new PropertyType("classTypeID", finf.ucf.cu.domain.ClassTypeImpl.class)
                }
            )
        );
    }
    
    private static final void initialize5()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.RoomImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.RoomImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.RoomImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("resources", finf.ucf.cu.domain.ResourceImpl.class), 
                    new PropertyType("buildingId", finf.ucf.cu.domain.BuildingImpl.class)
                }
            )
        );
    }
    
    private static final void initialize6()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.SemesterImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.SemesterImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.SemesterImpl.class,
            null);
    }
    
    private static final void initialize7()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.UsersImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.UsersImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.UsersImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("roles", finf.ucf.cu.domain.UserRoleImpl.class)
                }
            )
        );
    }
    
    private static final void initialize8()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.UserRoleImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.UserRoleImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.UserRoleImpl.class,
            null);
    }
    
    private static final void initialize9()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ClassTypeImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ClassTypeImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ClassTypeImpl.class,
            null);
    }
    
    private static final void initialize10()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ResourceImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ResourceImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ResourceImpl.class,
            null);
    }
    
    private static final void initialize11()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.BuildingImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.BuildingImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.BuildingImpl.class,
            null);
    }
    
    private static final void initialize12()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.NotAvalabilityImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.NotAvalabilityImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.NotAvalabilityImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("teacherId", finf.ucf.cu.domain.TeacherImpl.class), 
                    new PropertyType("groupId", finf.ucf.cu.domain.GroupImpl.class), 
                    new PropertyType("subjectId", finf.ucf.cu.domain.SubjectImpl.class)
                }
            )
        );
    }
    
    private static final void initialize13()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.P1Impl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.P1Impl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.P1Impl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("subjectId", finf.ucf.cu.domain.SubjectImpl.class), 
                    new PropertyType("teacher", finf.ucf.cu.domain.TeacherImpl.class)
                }
            )
        );
    }
    
    private static final void initialize14()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ActivityImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ActivityImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ActivityImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("classTypeId", finf.ucf.cu.domain.ClassTypeImpl.class), 
                    new PropertyType("resources", finf.ucf.cu.domain.ResourceImpl.class), 
                    new PropertyType("themeId", finf.ucf.cu.domain.ThemeImpl.class)
                }
            )
        );
    }
    
    private static final void initialize15()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ImpartitionPlanImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ImpartitionPlanImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ImpartitionPlanImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("subjectId", finf.ucf.cu.domain.SubjectImpl.class), 
                    new PropertyType("teacherId", finf.ucf.cu.domain.TeacherImpl.class), 
                    new PropertyType("classTypeId", finf.ucf.cu.domain.ClassTypeImpl.class), 
                    new PropertyType("groupId", finf.ucf.cu.domain.GroupImpl.class), 
                    new PropertyType("semesterId", finf.ucf.cu.domain.SemesterImpl.class)
                }
            )
        );
    }
    
    private static final void initialize16()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.DepartmentImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.DepartmentImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.DepartmentImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("teacher", finf.ucf.cu.domain.TeacherImpl.class)
                }
            )
        );
    }
    
    private static final void initialize17()
    {
        embeddedValueNamesByType.put(
            finf.ucf.cu.domain.ThemeImpl.class,
            null);
        embeddedValuesByType.put(
            finf.ucf.cu.domain.ThemeImpl.class,
            null);
        navigableAssociationEndsByType.put(
            finf.ucf.cu.domain.ThemeImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("punoId", finf.ucf.cu.domain.P1Impl.class)
                }
            )
        );
    }
    
    /**
     * Attempts to get the embedded value list for the given type (or returns null
     * if one doesn't exist).
     * 
     * @param type the type of which to retrieve the value.
     * @return the collection of embedded value names.
     */
    public static java.util.Collection getEmbeddedValues(final Class type)
    {
        return (java.util.Collection)embeddedValueNamesByType.get(type);
    }
    
    /**
     * Gets the type of the navigable association end given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getNavigableAssociationEndType(final Class ownerType, final String name)
    {
        return getPropertyType(navigableAssociationEndsByType, ownerType, name);
    }
    
    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getEmbeddedValueType(final Class ownerType, final String name)
    {
        return getPropertyType(embeddedValuesByType, ownerType, name);
    }
    
    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final java.util.Map properties, final Class ownerType, final String name)
    {
        final java.util.Collection ends = (java.util.Collection)properties.get(ownerType);
        final PropertyType type = (PropertyType)org.apache.commons.collections.CollectionUtils.find(
            ends,
            new org.apache.commons.collections.Predicate()
            {
                public boolean evaluate(final Object object)
                {
                    return ((PropertyType)object).name.equals(name);
                }
            });
        return type != null ? type.type : null;
    }
    
    /**
     * Gets the type of the property given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Class ownerType, final String name)
    {
        Class type = getNavigableAssociationEndType(ownerType, name);
        if (type == null)
        {
            type = getEmbeddedValueType(ownerType, name);
        }
        return type;
    }

    /**
     * A private class storing the name and type.
     */    
    protected static final class PropertyType
    {
        protected PropertyType(final String name, final Class type)
        {
            this.name = name;
            this.type = type;
        }
        protected String name;
        protected Class type;
    }
}