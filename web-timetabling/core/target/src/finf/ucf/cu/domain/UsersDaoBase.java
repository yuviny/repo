// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package finf.ucf.cu.domain;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>finf.ucf.cu.domain.Users</code>.
 * </p>
 *
 * @see finf.ucf.cu.domain.Users
 */
public abstract class UsersDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements finf.ucf.cu.domain.UsersDao
{

    private finf.ucf.cu.domain.UserRoleDao userRoleDao;

    /**
     * Sets the reference to <code>userRoleDao</code>.
     */
    public void setUserRoleDao(finf.ucf.cu.domain.UserRoleDao userRoleDao)
    {
        this.userRoleDao = userRoleDao;
    }

    /**
     * Gets the reference to <code>userRoleDao</code>.
     */
    protected finf.ucf.cu.domain.UserRoleDao getUserRoleDao()
    {
        return this.userRoleDao;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Users.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(finf.ucf.cu.domain.UsersImpl.class, id);
        return transformEntity(transform, (finf.ucf.cu.domain.Users)entity);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#load(java.lang.Long)
     */
    public finf.ucf.cu.domain.Users load(java.lang.Long id)
    {
        return (finf.ucf.cu.domain.Users)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(finf.ucf.cu.domain.UsersImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(finf.ucf.cu.domain.Users)
     */
    public finf.ucf.cu.domain.Users create(finf.ucf.cu.domain.Users users)
    {
        return (finf.ucf.cu.domain.Users)this.create(TRANSFORM_NONE, users);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(int transform, finf.ucf.cu.domain.Users)
     */
    public java.lang.Object create(final int transform, final finf.ucf.cu.domain.Users users)
    {
        if (users == null)
        {
            throw new IllegalArgumentException(
                "Users.create - 'users' can not be null");
        }
        this.getHibernateTemplate().save(users);
        return this.transformEntity(transform, users);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Users.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (finf.ucf.cu.domain.Users)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Date)
     */
    public finf.ucf.cu.domain.Users create(
        java.lang.String username,
        java.lang.String password,
        java.lang.String firstName,
        java.lang.String lastName,
        java.lang.String email,
        boolean isActive,
        java.util.Date creationDate)
    {
        return (finf.ucf.cu.domain.Users)this.create(TRANSFORM_NONE, username, password, firstName, lastName, email, isActive, creationDate);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#create(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Date)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String username,
        java.lang.String password,
        java.lang.String firstName,
        java.lang.String lastName,
        java.lang.String email,
        boolean isActive,
        java.util.Date creationDate)
    {
        finf.ucf.cu.domain.Users entity = new finf.ucf.cu.domain.UsersImpl();
        entity.setUsername(username);
        entity.setPassword(password);
        entity.setFirstName(firstName);
        entity.setLastName(lastName);
        entity.setEmail(email);
        entity.setIsActive(isActive);
        entity.setCreationDate(creationDate);
        return this.create(transform, entity);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#update(finf.ucf.cu.domain.Users)
     */
    public void update(finf.ucf.cu.domain.Users users)
    {
        if (users == null)
        {
            throw new IllegalArgumentException(
                "Users.update - 'users' can not be null");
        }
        this.getHibernateTemplate().update(users);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Users.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((finf.ucf.cu.domain.Users)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#remove(finf.ucf.cu.domain.Users)
     */
    public void remove(finf.ucf.cu.domain.Users users)
    {
        if (users == null)
        {
            throw new IllegalArgumentException(
                "Users.remove - 'users' can not be null");
        }
        this.getHibernateTemplate().delete(users);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Users.remove - 'id' can not be null");
        }
        finf.ucf.cu.domain.Users entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Users.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>finf.ucf.cu.domain.UsersDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link finf.ucf.cu.domain.Users} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link finf.ucf.cu.vo.UserVO} - {@link TRANSFORM_USERVO}</li>
     *   <li>{@link finf.ucf.cu.vo.UserDetailsVO} - {@link TRANSFORM_USERDETAILSVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link finf.ucf.cu.domain.UsersDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final finf.ucf.cu.domain.Users entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_USERVO :
                    target = toUserVO(entity);
                    break;
                case TRANSFORM_USERDETAILSVO :
                    target = toUserDetailsVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,finf.ucf.cu.domain.Users)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>finf.ucf.cu.domain.UsersDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,finf.ucf.cu.domain.Users)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_USERVO :
                toUserVOCollection(entities);
                break;
            case TRANSFORM_USERDETAILSVO :
                toUserDetailsVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link finf.ucf.cu.domain.Users}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof finf.ucf.cu.domain.Users)
                {
                    result = input;
                }
                return result;
            }
        };

    protected finf.ucf.cu.domain.Users toEntity(java.lang.Object[] row)
    {
        finf.ucf.cu.domain.Users target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof finf.ucf.cu.domain.Users)
                {
                    target = (finf.ucf.cu.domain.Users)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserVOCollection(java.util.Collection)
     */
    public final void toUserVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, USERVO_TRANSFORMER);
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserVOArray(java.util.Collection)
     */
    public final finf.ucf.cu.vo.UserVO[] toUserVOArray(java.util.Collection entities)
    {
        finf.ucf.cu.vo.UserVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toUserVOCollection(collection);
            result = (finf.ucf.cu.vo.UserVO[]) collection.toArray(new finf.ucf.cu.vo.UserVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link UsersDaoImpl} class if you intend to use reporting queries.
     * @see finf.ucf.cu.domain.UsersDao#toUserVO(finf.ucf.cu.domain.Users)
     */
    protected finf.ucf.cu.vo.UserVO toUserVO(java.lang.Object[] row)
    {
        return this.toUserVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link finf.ucf.cu.vo.UserVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer USERVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof finf.ucf.cu.domain.Users)
                {
                    result = toUserVO((finf.ucf.cu.domain.Users)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toUserVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see finf.ucf.cu.domain.UsersDao#userVOToEntityCollection(java.util.Collection)
     */
    public final void userVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof finf.ucf.cu.vo.UserVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, UserVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer UserVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return userVOToEntity((finf.ucf.cu.vo.UserVO)input);
            }
        };


    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserVO(finf.ucf.cu.domain.Users, finf.ucf.cu.vo.UserVO)
     */
    public void toUserVO(
        finf.ucf.cu.domain.Users source,
        finf.ucf.cu.vo.UserVO target)
    {
        target.setId(source.getId());
        target.setUsername(source.getUsername());
        target.setFirstName(source.getFirstName());
        target.setLastName(source.getLastName());
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserVO(finf.ucf.cu.domain.Users)
     */
    public finf.ucf.cu.vo.UserVO toUserVO(final finf.ucf.cu.domain.Users entity)
    {
        finf.ucf.cu.vo.UserVO target = null;
        if (entity != null)
        {
            target = new finf.ucf.cu.vo.UserVO();
            this.toUserVO(entity, target);
        }
        return target;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#userVOToEntity(finf.ucf.cu.vo.UserVO, finf.ucf.cu.domain.Users)
     */
    public void userVOToEntity(
        finf.ucf.cu.vo.UserVO source,
        finf.ucf.cu.domain.Users target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getUsername() != null)
        {
            target.setUsername(source.getUsername());
        }
        if (copyIfNull || source.getFirstName() != null)
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || source.getLastName() != null)
        {
            target.setLastName(source.getLastName());
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserDetailsVOCollection(java.util.Collection)
     */
    public final void toUserDetailsVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, USERDETAILSVO_TRANSFORMER);
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserDetailsVOArray(java.util.Collection)
     */
    public final finf.ucf.cu.vo.UserDetailsVO[] toUserDetailsVOArray(java.util.Collection entities)
    {
        finf.ucf.cu.vo.UserDetailsVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toUserDetailsVOCollection(collection);
            result = (finf.ucf.cu.vo.UserDetailsVO[]) collection.toArray(new finf.ucf.cu.vo.UserDetailsVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link UsersDaoImpl} class if you intend to use reporting queries.
     * @see finf.ucf.cu.domain.UsersDao#toUserDetailsVO(finf.ucf.cu.domain.Users)
     */
    protected finf.ucf.cu.vo.UserDetailsVO toUserDetailsVO(java.lang.Object[] row)
    {
        return this.toUserDetailsVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link finf.ucf.cu.vo.UserDetailsVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer USERDETAILSVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof finf.ucf.cu.domain.Users)
                {
                    result = toUserDetailsVO((finf.ucf.cu.domain.Users)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toUserDetailsVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see finf.ucf.cu.domain.UsersDao#userDetailsVOToEntityCollection(java.util.Collection)
     */
    public final void userDetailsVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof finf.ucf.cu.vo.UserDetailsVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, UserDetailsVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer UserDetailsVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return userDetailsVOToEntity((finf.ucf.cu.vo.UserDetailsVO)input);
            }
        };


    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserDetailsVO(finf.ucf.cu.domain.Users, finf.ucf.cu.vo.UserDetailsVO)
     */
    public void toUserDetailsVO(
        finf.ucf.cu.domain.Users source,
        finf.ucf.cu.vo.UserDetailsVO target)
    {
        target.setPassword(source.getPassword());
        target.setEmail(source.getEmail());
        target.setIsActive(source.isIsActive());
        target.setCreationDate(source.getCreationDate());
        // No conversion for target.roles (can't convert source.getRoles():finf.ucf.cu.domain.UserRole to finf.ucf.cu.vo.UserRoleVO[])
        target.setId(source.getId());
        target.setUsername(source.getUsername());
        target.setFirstName(source.getFirstName());
        target.setLastName(source.getLastName());
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#toUserDetailsVO(finf.ucf.cu.domain.Users)
     */
    public finf.ucf.cu.vo.UserDetailsVO toUserDetailsVO(final finf.ucf.cu.domain.Users entity)
    {
        finf.ucf.cu.vo.UserDetailsVO target = null;
        if (entity != null)
        {
            target = new finf.ucf.cu.vo.UserDetailsVO();
            this.toUserDetailsVO(entity, target);
        }
        return target;
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#userDetailsVOToEntity(finf.ucf.cu.vo.UserDetailsVO, finf.ucf.cu.domain.Users)
     */
    public void userDetailsVOToEntity(
        finf.ucf.cu.vo.UserDetailsVO source,
        finf.ucf.cu.domain.Users target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getUsername() != null)
        {
            target.setUsername(source.getUsername());
        }
        if (copyIfNull || source.getPassword() != null)
        {
            target.setPassword(source.getPassword());
        }
        if (copyIfNull || source.getFirstName() != null)
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || source.getLastName() != null)
        {
            target.setLastName(source.getLastName());
        }
        if (copyIfNull || source.getEmail() != null)
        {
            target.setEmail(source.getEmail());
        }
        if (copyIfNull || source.isIsActive() != false)
        {
            target.setIsActive(source.isIsActive());
        }
        if (copyIfNull || source.getCreationDate() != null)
        {
            target.setCreationDate(source.getCreationDate());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return finf.ucf.cu.PrincipalStore.get();
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#search(int, int, int, finf.ucf.cu.Search)
     */
    public finf.ucf.cu.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final finf.ucf.cu.PropertySearch propertySearch = new finf.ucf.cu.PropertySearch(
                this.getSession(false), finf.ucf.cu.domain.UsersImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new finf.ucf.cu.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#search(int, int, finf.ucf.cu.Search)
     */
    public finf.ucf.cu.PaginationResult search(final int pageNumber, final int pageSize, final finf.ucf.cu.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#search(int, finf.ucf.cu.Search)
     */
    public java.util.Set search(final int transform, final finf.ucf.cu.Search search)
    {
        try
        {
            final finf.ucf.cu.PropertySearch propertySearch = new finf.ucf.cu.PropertySearch(
                this.getSession(false), finf.ucf.cu.domain.UsersImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.UsersDao#search(finf.ucf.cu.Search)
     */
    public java.util.Set search(final finf.ucf.cu.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}