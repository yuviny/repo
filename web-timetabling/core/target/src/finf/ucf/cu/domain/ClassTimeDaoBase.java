// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package finf.ucf.cu.domain;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>finf.ucf.cu.domain.ClassTime</code>.
 * </p>
 *
 * @see finf.ucf.cu.domain.ClassTime
 */
public abstract class ClassTimeDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements finf.ucf.cu.domain.ClassTimeDao
{

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(finf.ucf.cu.domain.ClassTimeImpl.class, id);
        return transformEntity(transform, (finf.ucf.cu.domain.ClassTime)entity);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#load(java.lang.Long)
     */
    public finf.ucf.cu.domain.ClassTime load(java.lang.Long id)
    {
        return (finf.ucf.cu.domain.ClassTime)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(finf.ucf.cu.domain.ClassTimeImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(finf.ucf.cu.domain.ClassTime)
     */
    public finf.ucf.cu.domain.ClassTime create(finf.ucf.cu.domain.ClassTime classTime)
    {
        return (finf.ucf.cu.domain.ClassTime)this.create(TRANSFORM_NONE, classTime);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(int transform, finf.ucf.cu.domain.ClassTime)
     */
    public java.lang.Object create(final int transform, final finf.ucf.cu.domain.ClassTime classTime)
    {
        if (classTime == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.create - 'classTime' can not be null");
        }
        this.getHibernateTemplate().save(classTime);
        return this.transformEntity(transform, classTime);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (finf.ucf.cu.domain.ClassTime)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(java.util.Date, finf.ucf.cu.domain.cTime, java.lang.Integer, boolean, boolean)
     */
    public finf.ucf.cu.domain.ClassTime create(
        java.util.Date day,
        finf.ucf.cu.domain.cTime time,
        java.lang.Integer duration,
        boolean fixed,
        boolean tipic)
    {
        return (finf.ucf.cu.domain.ClassTime)this.create(TRANSFORM_NONE, day, time, duration, fixed, tipic);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(int, java.util.Date, finf.ucf.cu.domain.cTime, java.lang.Integer, boolean, boolean)
     */
    public java.lang.Object create(
        final int transform,
        java.util.Date day,
        finf.ucf.cu.domain.cTime time,
        java.lang.Integer duration,
        boolean fixed,
        boolean tipic)
    {
        finf.ucf.cu.domain.ClassTime entity = new finf.ucf.cu.domain.ClassTimeImpl();
        entity.setDay(day);
        entity.setTime(time);
        entity.setDuration(duration);
        entity.setFixed(fixed);
        entity.setTipic(tipic);
        return this.create(transform, entity);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(java.util.Date, finf.ucf.cu.domain.Group, finf.ucf.cu.domain.Semester, finf.ucf.cu.domain.Subject, finf.ucf.cu.domain.cTime)
     */
    public finf.ucf.cu.domain.ClassTime create(
        java.util.Date day,
        finf.ucf.cu.domain.Group groupId,
        finf.ucf.cu.domain.Semester solution,
        finf.ucf.cu.domain.Subject subjectId,
        finf.ucf.cu.domain.cTime time)
    {
        return (finf.ucf.cu.domain.ClassTime)this.create(TRANSFORM_NONE, day, groupId, solution, subjectId, time);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#create(int, java.util.Date, finf.ucf.cu.domain.Group, finf.ucf.cu.domain.Semester, finf.ucf.cu.domain.Subject, finf.ucf.cu.domain.cTime)
     */
    public java.lang.Object create(
        final int transform,
        java.util.Date day,
        finf.ucf.cu.domain.Group groupId,
        finf.ucf.cu.domain.Semester solution,
        finf.ucf.cu.domain.Subject subjectId,
        finf.ucf.cu.domain.cTime time)
    {
        finf.ucf.cu.domain.ClassTime entity = new finf.ucf.cu.domain.ClassTimeImpl();
        entity.setDay(day);
        entity.setGroupId(groupId);
        entity.setSolution(solution);
        entity.setSubjectId(subjectId);
        entity.setTime(time);
        return this.create(transform, entity);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#update(finf.ucf.cu.domain.ClassTime)
     */
    public void update(finf.ucf.cu.domain.ClassTime classTime)
    {
        if (classTime == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.update - 'classTime' can not be null");
        }
        this.getHibernateTemplate().update(classTime);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((finf.ucf.cu.domain.ClassTime)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#remove(finf.ucf.cu.domain.ClassTime)
     */
    public void remove(finf.ucf.cu.domain.ClassTime classTime)
    {
        if (classTime == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.remove - 'classTime' can not be null");
        }
        this.getHibernateTemplate().delete(classTime);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.remove - 'id' can not be null");
        }
        finf.ucf.cu.domain.ClassTime entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "ClassTime.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findById(java.lang.Long)
     */
    public finf.ucf.cu.domain.ClassTime findById(java.lang.Long id)
    {
        return (finf.ucf.cu.domain.ClassTime)this.findById(TRANSFORM_NONE, id);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findById(int, java.lang.Long)
     */
    public java.lang.Object findById(final int transform, final java.lang.Long id)
    {
        return this.findById(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.id = :id", id);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findById(java.lang.String, java.lang.Long)
     */
    public finf.ucf.cu.domain.ClassTime findById(final java.lang.String queryString, final java.lang.Long id)
    {
        return (finf.ucf.cu.domain.ClassTime)this.findById(TRANSFORM_NONE, queryString, id);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findById(int, java.lang.String, java.lang.Long)
     */
    public java.lang.Object findById(final int transform, final java.lang.String queryString, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("id", id);
            java.util.Set results = new java.util.LinkedHashSet(queryObject.list());
            java.lang.Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of 'finf.ucf.cu.domain.ClassTime"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = results.iterator().next();
                }
            }
            result = transformEntity(transform, (finf.ucf.cu.domain.ClassTime)result);
            return result;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(TRANSFORM_NONE, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(int, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final int transform, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(transform, -1, -1, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(java.lang.String, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final java.lang.String queryString, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(TRANSFORM_NONE, queryString, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(int, int, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(TRANSFORM_NONE, pageNumber, pageSize, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(String, int, int, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final String queryString, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(TRANSFORM_NONE, queryString, pageNumber, pageSize, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(int, String, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final int transform, final String queryString, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(transform, queryString, -1, -1, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(int, int, int, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByTeacherId(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.teacherId = :teacherId", pageNumber, pageSize, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByTeacherId(int, java.lang.String, int, int, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByTeacherId(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final finf.ucf.cu.domain.Teacher teacherId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("teacherId", teacherId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(TRANSFORM_NONE, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(int, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final int transform, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(transform, -1, -1, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(java.lang.String, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final java.lang.String queryString, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(TRANSFORM_NONE, queryString, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(int, int, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(TRANSFORM_NONE, pageNumber, pageSize, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(String, int, int, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final String queryString, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(TRANSFORM_NONE, queryString, pageNumber, pageSize, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(int, String, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final int transform, final String queryString, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(transform, queryString, -1, -1, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(int, int, int, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByGroupId(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.groupId = :groupId", pageNumber, pageSize, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByGroupId(int, java.lang.String, int, int, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByGroupId(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final finf.ucf.cu.domain.Group groupId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("groupId", groupId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(TRANSFORM_NONE, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(int, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final int transform, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(transform, -1, -1, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(java.lang.String, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final java.lang.String queryString, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(TRANSFORM_NONE, queryString, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(int, int, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(TRANSFORM_NONE, pageNumber, pageSize, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(String, int, int, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final String queryString, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(TRANSFORM_NONE, queryString, pageNumber, pageSize, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(int, String, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final int transform, final String queryString, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(transform, queryString, -1, -1, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(int, int, int, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Subject subjectId)
    {
        return this.findBySubjectId(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.subjectId = :subjectId", pageNumber, pageSize, subjectId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySubjectId(int, java.lang.String, int, int, finf.ucf.cu.domain.Subject)
     */
    public java.util.List findBySubjectId(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final finf.ucf.cu.domain.Subject subjectId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("subjectId", subjectId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(TRANSFORM_NONE, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(int, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final int transform, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(transform, -1, -1, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(java.lang.String, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final java.lang.String queryString, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(TRANSFORM_NONE, queryString, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(int, int, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(TRANSFORM_NONE, pageNumber, pageSize, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(String, int, int, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final String queryString, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(TRANSFORM_NONE, queryString, pageNumber, pageSize, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(int, String, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final int transform, final String queryString, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(transform, queryString, -1, -1, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(int, int, int, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByRoomId(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.roomId = :roomId", pageNumber, pageSize, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByRoomId(int, java.lang.String, int, int, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByRoomId(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final finf.ucf.cu.domain.Room roomId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("roomId", roomId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(TRANSFORM_NONE, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(int, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final int transform, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(transform, -1, -1, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(java.lang.String, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final java.lang.String queryString, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(TRANSFORM_NONE, queryString, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(int, int, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(TRANSFORM_NONE, pageNumber, pageSize, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(String, int, int, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final String queryString, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(TRANSFORM_NONE, queryString, pageNumber, pageSize, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(int, String, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final int transform, final String queryString, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(transform, queryString, -1, -1, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(int, int, int, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.domain.Semester solution)
    {
        return this.findBySolution(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.solution = :solution", pageNumber, pageSize, solution);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findBySolution(int, java.lang.String, int, int, finf.ucf.cu.domain.Semester)
     */
    public java.util.List findBySolution(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final finf.ucf.cu.domain.Semester solution)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("solution", solution);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(java.util.Date day, finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(TRANSFORM_NONE, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(int, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final int transform, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(transform, -1, -1, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(java.lang.String, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final java.lang.String queryString, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(TRANSFORM_NONE, queryString, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(int, int, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(TRANSFORM_NONE, pageNumber, pageSize, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(String, int, int, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final String queryString, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(TRANSFORM_NONE, queryString, pageNumber, pageSize, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(int, String, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final int transform, final String queryString, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(transform, queryString, -1, -1, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(int, int, int, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final int transform, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        return this.findByDayAndGroup(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.day = :day and classTime.groupId = :groupId", pageNumber, pageSize, day, groupId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndGroup(int, java.lang.String, int, int, java.util.Date, finf.ucf.cu.domain.Group)
     */
    public java.util.List findByDayAndGroup(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Group groupId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("day", day);
            queryObject.setParameter("groupId", groupId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(java.util.Date day, finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(TRANSFORM_NONE, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(int, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final int transform, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(transform, -1, -1, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(java.lang.String, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final java.lang.String queryString, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(TRANSFORM_NONE, queryString, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(int, int, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(TRANSFORM_NONE, pageNumber, pageSize, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(String, int, int, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final String queryString, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(TRANSFORM_NONE, queryString, pageNumber, pageSize, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(int, String, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final int transform, final String queryString, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(transform, queryString, -1, -1, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(int, int, int, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final int transform, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        return this.findByDayAndTeacher(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.day = :day and classTime.teacherId = :teacherId", pageNumber, pageSize, day, teacherId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndTeacher(int, java.lang.String, int, int, java.util.Date, finf.ucf.cu.domain.Teacher)
     */
    public java.util.List findByDayAndTeacher(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Teacher teacherId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("day", day);
            queryObject.setParameter("teacherId", teacherId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(java.util.Date day, finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(TRANSFORM_NONE, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(int, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final int transform, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(transform, -1, -1, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(java.lang.String, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final java.lang.String queryString, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(TRANSFORM_NONE, queryString, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(int, int, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(TRANSFORM_NONE, pageNumber, pageSize, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(String, int, int, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final String queryString, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(TRANSFORM_NONE, queryString, pageNumber, pageSize, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(int, String, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final int transform, final String queryString, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(transform, queryString, -1, -1, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(int, int, int, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final int transform, final int pageNumber, final int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        return this.findByDayAndRoom(transform, "from finf.ucf.cu.domain.ClassTime as classTime where classTime.day = :day and classTime.roomId = :roomId", pageNumber, pageSize, day, roomId);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#findByDayAndRoom(int, java.lang.String, int, int, java.util.Date, finf.ucf.cu.domain.Room)
     */
    public java.util.List findByDayAndRoom(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final java.util.Date day, final finf.ucf.cu.domain.Room roomId)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("day", day);
            queryObject.setParameter("roomId", roomId);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>finf.ucf.cu.domain.ClassTimeDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link finf.ucf.cu.domain.ClassTimeDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final finf.ucf.cu.domain.ClassTime entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,finf.ucf.cu.domain.ClassTime)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>finf.ucf.cu.domain.ClassTimeDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,finf.ucf.cu.domain.ClassTime)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link finf.ucf.cu.domain.ClassTime}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof finf.ucf.cu.domain.ClassTime)
                {
                    result = input;
                }
                return result;
            }
        };

    protected finf.ucf.cu.domain.ClassTime toEntity(java.lang.Object[] row)
    {
        finf.ucf.cu.domain.ClassTime target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof finf.ucf.cu.domain.ClassTime)
                {
                    target = (finf.ucf.cu.domain.ClassTime)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return finf.ucf.cu.PrincipalStore.get();
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#search(int, int, int, finf.ucf.cu.Search)
     */
    public finf.ucf.cu.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final finf.ucf.cu.PropertySearch propertySearch = new finf.ucf.cu.PropertySearch(
                this.getSession(false), finf.ucf.cu.domain.ClassTimeImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new finf.ucf.cu.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#search(int, int, finf.ucf.cu.Search)
     */
    public finf.ucf.cu.PaginationResult search(final int pageNumber, final int pageSize, final finf.ucf.cu.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#search(int, finf.ucf.cu.Search)
     */
    public java.util.Set search(final int transform, final finf.ucf.cu.Search search)
    {
        try
        {
            final finf.ucf.cu.PropertySearch propertySearch = new finf.ucf.cu.PropertySearch(
                this.getSession(false), finf.ucf.cu.domain.ClassTimeImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see finf.ucf.cu.domain.ClassTimeDao#search(finf.ucf.cu.Search)
     */
    public java.util.Set search(final finf.ucf.cu.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}