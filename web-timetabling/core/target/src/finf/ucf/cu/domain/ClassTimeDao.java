// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package finf.ucf.cu.domain;

/**
 * @see finf.ucf.cu.domain.ClassTime
 */
public interface ClassTimeDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link com.lighthousepmg.plz.domain.messaging.persistence.CommunicationCategory}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param the query results.
     */
    public void toEntities(final java.util.Collection results);

    /**
     * Loads an instance of finf.ucf.cu.domain.ClassTime from the persistent store.
     */
    public finf.ucf.cu.domain.ClassTime load(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);

    /**
     * Loads all entities of type {@link finf.ucf.cu.domain.ClassTime}.
     *
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of finf.ucf.cu.domain.ClassTime and adds it to the persistent store.
     */
    public finf.ucf.cu.domain.ClassTime create(finf.ucf.cu.domain.ClassTime classTime);

    /**
     * <p>
     * Does the same thing as {@link #create(finf.ucf.cu.domain.ClassTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, finf.ucf.cu.domain.ClassTime classTime);

    /**
     * Creates a new instance of finf.ucf.cu.domain.ClassTime and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of finf.ucf.cu.domain.ClassTime
     * instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     * Does the same thing as {@link #create(finf.ucf.cu.domain.ClassTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     * Creates a new <code>finf.ucf.cu.domain.ClassTime</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public finf.ucf.cu.domain.ClassTime create(
        java.util.Date day,
        finf.ucf.cu.domain.cTime time,
        java.lang.Integer duration,
        boolean fixed,
        boolean tipic);

    /**
     * <p>
     * Does the same thing as {@link #create(java.util.Date, finf.ucf.cu.domain.cTime, java.lang.Integer, boolean, boolean)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.util.Date day,
        finf.ucf.cu.domain.cTime time,
        java.lang.Integer duration,
        boolean fixed,
        boolean tipic);

    /**
     * <p>
     * Creates a new <code>finf.ucf.cu.domain.ClassTime</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     */
    public finf.ucf.cu.domain.ClassTime create(
        java.util.Date day,
        finf.ucf.cu.domain.Group groupId,
        finf.ucf.cu.domain.Semester solution,
        finf.ucf.cu.domain.Subject subjectId,
        finf.ucf.cu.domain.cTime time);

    /**
     * <p>
     * Does the same thing as {@link #create(java.util.Date, finf.ucf.cu.domain.cTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.util.Date day,
        finf.ucf.cu.domain.Group groupId,
        finf.ucf.cu.domain.Semester solution,
        finf.ucf.cu.domain.Subject subjectId,
        finf.ucf.cu.domain.cTime time);

    /**
     * Updates the <code>classTime</code> instance in the persistent store.
     */
    public void update(finf.ucf.cu.domain.ClassTime classTime);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of finf.ucf.cu.domain.ClassTime from the persistent store.
     */
    public void remove(finf.ucf.cu.domain.ClassTime classTime);

    /**
     * Removes the instance of finf.ucf.cu.domain.ClassTime having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     */
    public void remove(java.util.Collection entities);

    /**
     * 
     */
    public finf.ucf.cu.domain.ClassTime findById(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #findById(java.lang.Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findById(java.lang.Long)}.
     * </p>
     */
    public finf.ucf.cu.domain.ClassTime findById(String queryString, java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #findById(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.lang.Object findById(int transform, java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #findById(int, java.lang.Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findById(int, java.lang.Long id)}.
     * </p>
     */
    public java.lang.Object findById(int transform, String queryString, java.lang.Long id);

    /**
     * 
     */
    public java.util.List findByTeacherId(finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(finf.ucf.cu.domain.Teacher)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTeacherId(finf.ucf.cu.domain.Teacher)}.
     * </p>
     */
    public java.util.List findByTeacherId(String queryString, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByTeacherId(int pageNumber, int pageSize, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(String, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByTeacherId(String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(finf.ucf.cu.domain.Teacher)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByTeacherId(int transform, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(int, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByTeacherId(int transform, int pageNumber, int pageSize, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(int, finf.ucf.cu.domain.Teacher)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTeacherId(int, finf.ucf.cu.domain.Teacher teacherId)}.
     * </p>
     */
    public java.util.List findByTeacherId(int transform, String queryString, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByTeacherId(int, String, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByTeacherId(int transform, String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * 
     */
    public java.util.List findByGroupId(finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(finf.ucf.cu.domain.Group)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByGroupId(finf.ucf.cu.domain.Group)}.
     * </p>
     */
    public java.util.List findByGroupId(String queryString, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByGroupId(int pageNumber, int pageSize, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(String, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByGroupId(String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(finf.ucf.cu.domain.Group)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByGroupId(int transform, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(int, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByGroupId(int transform, int pageNumber, int pageSize, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(int, finf.ucf.cu.domain.Group)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByGroupId(int, finf.ucf.cu.domain.Group groupId)}.
     * </p>
     */
    public java.util.List findByGroupId(int transform, String queryString, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByGroupId(int, String, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByGroupId(int transform, String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Group groupId);

    /**
     * 
     */
    public java.util.List findBySubjectId(finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(finf.ucf.cu.domain.Subject)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findBySubjectId(finf.ucf.cu.domain.Subject)}.
     * </p>
     */
    public java.util.List findBySubjectId(String queryString, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(finf.ucf.cu.domain.Subject)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySubjectId(int pageNumber, int pageSize, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(String, finf.ucf.cu.domain.Subject)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySubjectId(String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(finf.ucf.cu.domain.Subject)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findBySubjectId(int transform, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(int, finf.ucf.cu.domain.Subject)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySubjectId(int transform, int pageNumber, int pageSize, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(int, finf.ucf.cu.domain.Subject)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findBySubjectId(int, finf.ucf.cu.domain.Subject subjectId)}.
     * </p>
     */
    public java.util.List findBySubjectId(int transform, String queryString, finf.ucf.cu.domain.Subject subjectId);

    /**
     * <p>
     * Does the same thing as {@link #findBySubjectId(int, String, finf.ucf.cu.domain.Subject)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySubjectId(int transform, String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Subject subjectId);

    /**
     * 
     */
    public java.util.List findByRoomId(finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(finf.ucf.cu.domain.Room)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRoomId(finf.ucf.cu.domain.Room)}.
     * </p>
     */
    public java.util.List findByRoomId(String queryString, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByRoomId(int pageNumber, int pageSize, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(String, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByRoomId(String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(finf.ucf.cu.domain.Room)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByRoomId(int transform, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(int, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByRoomId(int transform, int pageNumber, int pageSize, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(int, finf.ucf.cu.domain.Room)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRoomId(int, finf.ucf.cu.domain.Room roomId)}.
     * </p>
     */
    public java.util.List findByRoomId(int transform, String queryString, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByRoomId(int, String, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByRoomId(int transform, String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Room roomId);

    /**
     * 
     */
    public java.util.List findBySolution(finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(finf.ucf.cu.domain.Semester)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findBySolution(finf.ucf.cu.domain.Semester)}.
     * </p>
     */
    public java.util.List findBySolution(String queryString, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(finf.ucf.cu.domain.Semester)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySolution(int pageNumber, int pageSize, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(String, finf.ucf.cu.domain.Semester)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySolution(String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(finf.ucf.cu.domain.Semester)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findBySolution(int transform, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(int, finf.ucf.cu.domain.Semester)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySolution(int transform, int pageNumber, int pageSize, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(int, finf.ucf.cu.domain.Semester)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findBySolution(int, finf.ucf.cu.domain.Semester solution)}.
     * </p>
     */
    public java.util.List findBySolution(int transform, String queryString, finf.ucf.cu.domain.Semester solution);

    /**
     * <p>
     * Does the same thing as {@link #findBySolution(int, String, finf.ucf.cu.domain.Semester)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findBySolution(int transform, String queryString, int pageNumber, int pageSize, finf.ucf.cu.domain.Semester solution);

    /**
     * 
     */
    public java.util.List findByDayAndGroup(java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndGroup(java.util.Date, finf.ucf.cu.domain.Group)}.
     * </p>
     */
    public java.util.List findByDayAndGroup(String queryString, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndGroup(int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(String, java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndGroup(String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByDayAndGroup(int transform, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(int, java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndGroup(int transform, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(int, java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndGroup(int, java.util.Date day, finf.ucf.cu.domain.Group groupId)}.
     * </p>
     */
    public java.util.List findByDayAndGroup(int transform, String queryString, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndGroup(int, String, java.util.Date, finf.ucf.cu.domain.Group)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndGroup(int transform, String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Group groupId);

    /**
     * 
     */
    public java.util.List findByDayAndTeacher(java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndTeacher(java.util.Date, finf.ucf.cu.domain.Teacher)}.
     * </p>
     */
    public java.util.List findByDayAndTeacher(String queryString, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndTeacher(int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(String, java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndTeacher(String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByDayAndTeacher(int transform, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(int, java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndTeacher(int transform, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(int, java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndTeacher(int, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId)}.
     * </p>
     */
    public java.util.List findByDayAndTeacher(int transform, String queryString, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndTeacher(int, String, java.util.Date, finf.ucf.cu.domain.Teacher)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndTeacher(int transform, String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Teacher teacherId);

    /**
     * 
     */
    public java.util.List findByDayAndRoom(java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndRoom(java.util.Date, finf.ucf.cu.domain.Room)}.
     * </p>
     */
    public java.util.List findByDayAndRoom(String queryString, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndRoom(int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(String, java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndRoom(String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List findByDayAndRoom(int transform, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(int, java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndRoom(int transform, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(int, java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByDayAndRoom(int, java.util.Date day, finf.ucf.cu.domain.Room roomId)}.
     * </p>
     */
    public java.util.List findByDayAndRoom(int transform, String queryString, java.util.Date day, finf.ucf.cu.domain.Room roomId);

    /**
     * <p>
     * Does the same thing as {@link #findByDayAndRoom(int, String, java.util.Date, finf.ucf.cu.domain.Room)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List findByDayAndRoom(int transform, String queryString, int pageNumber, int pageSize, java.util.Date day, finf.ucf.cu.domain.Room roomId);


    /**
     * Does the same thing as {@link #search(int, finf.ucf.cu.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link finf.ucf.cu.PaginationResult} instance.
     */
    public finf.ucf.cu.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final finf.ucf.cu.Search search);

    /**
     * Does the same thing as {@link #search(finf.ucf.cu.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link finf.ucf.cu.PaginationResult} instance.
     */
    public finf.ucf.cu.PaginationResult search(final int pageNumber, final int pageSize, final finf.ucf.cu.Search search);

    /**
     * Does the same thing as {@link #search(finf.ucf.cu.Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final int transform, final finf.ucf.cu.Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final finf.ucf.cu.Search search);

    // spring-dao merge-point
}