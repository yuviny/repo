// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package finf.ucf.cu.service;

/**
 * <p>
 * Spring Service base class for <code>finf.ucf.cu.service.GroupScheduleService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see finf.ucf.cu.service.GroupScheduleService
 */
public abstract class GroupScheduleServiceBase
    implements finf.ucf.cu.service.GroupScheduleService
{

    private finf.ucf.cu.domain.TeacherDao teacherDao;

    /**
     * Sets the reference to <code>teacher</code>'s DAO.
     */
    public void setTeacherDao(finf.ucf.cu.domain.TeacherDao teacherDao)
    {
        this.teacherDao = teacherDao;
    }

    /**
     * Gets the reference to <code>teacher</code>'s DAO.
     */
    protected finf.ucf.cu.domain.TeacherDao getTeacherDao()
    {
        return this.teacherDao;
    }

    private finf.ucf.cu.domain.ClassTimeDao classTimeDao;

    /**
     * Sets the reference to <code>classTime</code>'s DAO.
     */
    public void setClassTimeDao(finf.ucf.cu.domain.ClassTimeDao classTimeDao)
    {
        this.classTimeDao = classTimeDao;
    }

    /**
     * Gets the reference to <code>classTime</code>'s DAO.
     */
    protected finf.ucf.cu.domain.ClassTimeDao getClassTimeDao()
    {
        return this.classTimeDao;
    }

    private finf.ucf.cu.domain.GroupDao groupDao;

    /**
     * Sets the reference to <code>group</code>'s DAO.
     */
    public void setGroupDao(finf.ucf.cu.domain.GroupDao groupDao)
    {
        this.groupDao = groupDao;
    }

    /**
     * Gets the reference to <code>group</code>'s DAO.
     */
    protected finf.ucf.cu.domain.GroupDao getGroupDao()
    {
        return this.groupDao;
    }

    private finf.ucf.cu.domain.SubjectDao subjectDao;

    /**
     * Sets the reference to <code>subject</code>'s DAO.
     */
    public void setSubjectDao(finf.ucf.cu.domain.SubjectDao subjectDao)
    {
        this.subjectDao = subjectDao;
    }

    /**
     * Gets the reference to <code>subject</code>'s DAO.
     */
    protected finf.ucf.cu.domain.SubjectDao getSubjectDao()
    {
        return this.subjectDao;
    }

    private finf.ucf.cu.domain.RoomDao roomDao;

    /**
     * Sets the reference to <code>room</code>'s DAO.
     */
    public void setRoomDao(finf.ucf.cu.domain.RoomDao roomDao)
    {
        this.roomDao = roomDao;
    }

    /**
     * Gets the reference to <code>room</code>'s DAO.
     */
    protected finf.ucf.cu.domain.RoomDao getRoomDao()
    {
        return this.roomDao;
    }

    private finf.ucf.cu.domain.SemesterDao semesterDao;

    /**
     * Sets the reference to <code>semester</code>'s DAO.
     */
    public void setSemesterDao(finf.ucf.cu.domain.SemesterDao semesterDao)
    {
        this.semesterDao = semesterDao;
    }

    /**
     * Gets the reference to <code>semester</code>'s DAO.
     */
    protected finf.ucf.cu.domain.SemesterDao getSemesterDao()
    {
        return this.semesterDao;
    }

    private finf.ucf.cu.domain.ClassTypeDao classTypeDao;

    /**
     * Sets the reference to <code>classType</code>'s DAO.
     */
    public void setClassTypeDao(finf.ucf.cu.domain.ClassTypeDao classTypeDao)
    {
        this.classTypeDao = classTypeDao;
    }

    /**
     * Gets the reference to <code>classType</code>'s DAO.
     */
    protected finf.ucf.cu.domain.ClassTypeDao getClassTypeDao()
    {
        return this.classTypeDao;
    }

    /**
     * @see finf.ucf.cu.service.GroupScheduleService#getGroupSchedule(java.lang.Long, java.util.Date)
     */
    public java.util.List getGroupSchedule(final java.lang.Long groupId, final java.util.Date date)
    {
        if (groupId == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getGroupSchedule(java.lang.Long groupId, java.util.Date date) - 'groupId' can not be null");
        }
        if (date == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getGroupSchedule(java.lang.Long groupId, java.util.Date date) - 'date' can not be null");
        }
        try
        {
            return this.handleGetGroupSchedule(groupId, date);
        }
        catch (Throwable th)
        {
            throw new finf.ucf.cu.service.GroupScheduleServiceException(
                "Error performing 'finf.ucf.cu.service.GroupScheduleService.getGroupSchedule(java.lang.Long groupId, java.util.Date date)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getGroupSchedule(java.lang.Long, java.util.Date)}
      */
    protected abstract java.util.List handleGetGroupSchedule(java.lang.Long groupId, java.util.Date date)
        throws java.lang.Exception;

    /**
     * @see finf.ucf.cu.service.GroupScheduleService#getTeacherSchedule(java.lang.Long, java.util.Date)
     */
    public java.util.List getTeacherSchedule(final java.lang.Long teacherId, final java.util.Date date)
    {
        if (teacherId == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getTeacherSchedule(java.lang.Long teacherId, java.util.Date date) - 'teacherId' can not be null");
        }
        if (date == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getTeacherSchedule(java.lang.Long teacherId, java.util.Date date) - 'date' can not be null");
        }
        try
        {
            return this.handleGetTeacherSchedule(teacherId, date);
        }
        catch (Throwable th)
        {
            throw new finf.ucf.cu.service.GroupScheduleServiceException(
                "Error performing 'finf.ucf.cu.service.GroupScheduleService.getTeacherSchedule(java.lang.Long teacherId, java.util.Date date)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getTeacherSchedule(java.lang.Long, java.util.Date)}
      */
    protected abstract java.util.List handleGetTeacherSchedule(java.lang.Long teacherId, java.util.Date date)
        throws java.lang.Exception;

    /**
     * @see finf.ucf.cu.service.GroupScheduleService#getRoomSchedule(java.lang.Long, java.util.Date)
     */
    public java.util.List getRoomSchedule(final java.lang.Long roomId, final java.util.Date date)
    {
        if (roomId == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getRoomSchedule(java.lang.Long roomId, java.util.Date date) - 'roomId' can not be null");
        }
        if (date == null)
        {
            throw new IllegalArgumentException(
                "finf.ucf.cu.service.GroupScheduleService.getRoomSchedule(java.lang.Long roomId, java.util.Date date) - 'date' can not be null");
        }
        try
        {
            return this.handleGetRoomSchedule(roomId, date);
        }
        catch (Throwable th)
        {
            throw new finf.ucf.cu.service.GroupScheduleServiceException(
                "Error performing 'finf.ucf.cu.service.GroupScheduleService.getRoomSchedule(java.lang.Long roomId, java.util.Date date)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getRoomSchedule(java.lang.Long, java.util.Date)}
      */
    protected abstract java.util.List handleGetRoomSchedule(java.lang.Long roomId, java.util.Date date)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return finf.ucf.cu.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            finf.ucf.cu.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}